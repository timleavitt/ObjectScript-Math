language: minimal

os: linux

services:
  - docker

env:
  - container_image="intersystemsdc/iris-community:2019.4.0.383.0-zpm"
    instance="iris"
    package="objectscript-math"
    build_flags="-verbose"
    >
    test_flags="-verbose -DUnitTest.ManagerClass=TestCoverage.Manager -DUnitTest.JUnitOutput=/source/junit.xml
    -DUnitTest.FailuresAreFatal=1 -DUnitTest.Manager=TestCoverage.Manager
    -DUnitTest.UserParam.CoverageReportClass=TestCoverage.Report.Cobertura.ReportGenerator
    -DUnitTest.UserParam.CoverageReportFile=/source/coverage.xml"

install:
  # Run InterSystems IRIS instance
  - docker pull $container_image
  - docker run -d -h $instance --name $instance -v $TRAVIS_BUILD_DIR:/source --init $container_image
  - echo halt > wait
  - until docker exec --interactive $instance iris session $instance < wait; do sleep 1; done # Wait for instance to be ready
  # Install TestCoverage
  - >
    echo
    "set good = ##class(%ZPM.PackageManager).Shell(\"install testcoverage\")
    write !
    if good<1 { do \$System.Process.Terminate(\$job,1) }
    halt" > install-testcoverage
  - docker exec --interactive $instance iris session $instance -B < install-testcoverage
  # Workaround for permissions issues in TestCoverage (creating directory for source export)
  - mkdir $TRAVIS_BUILD_DIR/source

script:
  # Run build
  - >
    echo
    "set good = ##class(%ZPM.PackageManager).Shell(\"load /source $build_flags\")
    write !
    if good<1 { do \$System.Process.Terminate(\$job,1) }
    halt" > build
  # Run tests
  - >
    echo
    "set good = ##class(%ZPM.PackageManager).Shell(\"$package test -only $test_flags\")
    write !
    if good<1 { do \$System.Process.Terminate(\$job,1) }
    halt" > test
  - docker exec --interactive $instance iris session $instance -B < build && docker exec --interactive $instance iris session $instance -B < test

after_success:
  # Publish to codecov
  - bash <(curl -s https://codecov.io/bash)